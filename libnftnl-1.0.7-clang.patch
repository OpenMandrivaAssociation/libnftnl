--- libnftnl-1.0.7/src/expr.c.omv~	2017-01-30 18:11:37.605990011 +0100
+++ libnftnl-1.0.7/src/expr.c	2017-01-30 18:13:48.885019686 +0100
@@ -24,7 +24,9 @@
 
 #include <libnftnl/expr.h>
 
-struct nftnl_expr *nftnl_expr_alloc(const char *name)
+#undef snprintf
+
+__visible struct nftnl_expr *nftnl_expr_alloc(const char *name)
 {
 	struct nftnl_expr *expr;
 	struct expr_ops *ops;
@@ -45,7 +47,7 @@ struct nftnl_expr *nftnl_expr_alloc(cons
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_alloc, nft_rule_expr_alloc);
 
-void nftnl_expr_free(const struct nftnl_expr *expr)
+__visible void nftnl_expr_free(const struct nftnl_expr *expr)
 {
 	if (expr->ops->free)
 		expr->ops->free(expr);
@@ -54,13 +56,13 @@ void nftnl_expr_free(const struct nftnl_
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_free, nft_rule_expr_free);
 
-bool nftnl_expr_is_set(const struct nftnl_expr *expr, uint16_t type)
+__visible bool nftnl_expr_is_set(const struct nftnl_expr *expr, uint16_t type)
 {
 	return expr->flags & (1 << type);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_is_set, nft_rule_expr_is_set);
 
-int nftnl_expr_set(struct nftnl_expr *expr, uint16_t type,
+__visible int nftnl_expr_set(struct nftnl_expr *expr, uint16_t type,
 		   const void *data, uint32_t data_len)
 {
 	switch(type) {
@@ -75,41 +77,41 @@ int nftnl_expr_set(struct nftnl_expr *ex
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set, nft_rule_expr_set);
 
-void
+__visible void
 nftnl_expr_set_u8(struct nftnl_expr *expr, uint16_t type, uint8_t data)
 {
 	nftnl_expr_set(expr, type, &data, sizeof(uint8_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set_u8, nft_rule_expr_set_u8);
 
-void
+__visible void
 nftnl_expr_set_u16(struct nftnl_expr *expr, uint16_t type, uint16_t data)
 {
 	nftnl_expr_set(expr, type, &data, sizeof(uint16_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set_u16, nft_rule_expr_set_u16);
 
-void
+__visible void
 nftnl_expr_set_u32(struct nftnl_expr *expr, uint16_t type, uint32_t data)
 {
 	nftnl_expr_set(expr, type, &data, sizeof(uint32_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set_u32, nft_rule_expr_set_u32);
 
-void
+__visible void
 nftnl_expr_set_u64(struct nftnl_expr *expr, uint16_t type, uint64_t data)
 {
 	nftnl_expr_set(expr, type, &data, sizeof(uint64_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set_u64, nft_rule_expr_set_u64);
 
-int nftnl_expr_set_str(struct nftnl_expr *expr, uint16_t type, const char *str)
+__visible int nftnl_expr_set_str(struct nftnl_expr *expr, uint16_t type, const char *str)
 {
 	return nftnl_expr_set(expr, type, str, strlen(str) + 1);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_set_str, nft_rule_expr_set_str);
 
-const void *nftnl_expr_get(const struct nftnl_expr *expr,
+__visible const void *nftnl_expr_get(const struct nftnl_expr *expr,
 			      uint16_t type, uint32_t *data_len)
 {
 	const void *ret;
@@ -131,7 +133,7 @@ const void *nftnl_expr_get(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get, nft_rule_expr_get);
 
-uint8_t nftnl_expr_get_u8(const struct nftnl_expr *expr, uint16_t type)
+__visible uint8_t nftnl_expr_get_u8(const struct nftnl_expr *expr, uint16_t type)
 {
 	const void *data;
 	uint32_t data_len;
@@ -147,7 +149,7 @@ uint8_t nftnl_expr_get_u8(const struct n
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get_u8, nft_rule_expr_get_u8);
 
-uint16_t nftnl_expr_get_u16(const struct nftnl_expr *expr, uint16_t type)
+__visible uint16_t nftnl_expr_get_u16(const struct nftnl_expr *expr, uint16_t type)
 {
 	const void *data;
 	uint32_t data_len;
@@ -163,7 +165,7 @@ uint16_t nftnl_expr_get_u16(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get_u16, nft_rule_expr_get_u16);
 
-uint32_t nftnl_expr_get_u32(const struct nftnl_expr *expr, uint16_t type)
+__visible uint32_t nftnl_expr_get_u32(const struct nftnl_expr *expr, uint16_t type)
 {
 	const void *data;
 	uint32_t data_len;
@@ -179,7 +181,7 @@ uint32_t nftnl_expr_get_u32(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get_u32, nft_rule_expr_get_u32);
 
-uint64_t nftnl_expr_get_u64(const struct nftnl_expr *expr, uint16_t type)
+__visible uint64_t nftnl_expr_get_u64(const struct nftnl_expr *expr, uint16_t type)
 {
 	const void *data;
 	uint32_t data_len;
@@ -195,7 +197,7 @@ uint64_t nftnl_expr_get_u64(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get_u64, nft_rule_expr_get_u64);
 
-const char *nftnl_expr_get_str(const struct nftnl_expr *expr, uint16_t type)
+__visible const char *nftnl_expr_get_str(const struct nftnl_expr *expr, uint16_t type)
 {
 	uint32_t data_len;
 
@@ -203,7 +205,7 @@ const char *nftnl_expr_get_str(const str
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_get_str, nft_rule_expr_get_str);
 
-bool nftnl_expr_cmp(const struct nftnl_expr *e1, const struct nftnl_expr *e2)
+__visible bool nftnl_expr_cmp(const struct nftnl_expr *e1, const struct nftnl_expr *e2)
 {
 	if (e1->flags != e2->flags ||
 	    strcmp(e1->ops->name, e2->ops->name) != 0)
@@ -213,7 +215,7 @@ bool nftnl_expr_cmp(const struct nftnl_e
 }
 EXPORT_SYMBOL(nftnl_expr_cmp);
 
-void nftnl_expr_build_payload(struct nlmsghdr *nlh, struct nftnl_expr *expr)
+__visible void nftnl_expr_build_payload(struct nlmsghdr *nlh, struct nftnl_expr *expr)
 {
 	struct nlattr *nest;
 
@@ -275,7 +277,7 @@ err1:
 	return NULL;
 }
 
-int nftnl_expr_snprintf(char *buf, size_t size, const struct nftnl_expr *expr,
+__visible int nftnl_expr_snprintf(char *buf, size_t size, const struct nftnl_expr *expr,
 			uint32_t type, uint32_t flags)
 {
 	int ret;
--- libnftnl-1.0.7/src/object.c.omv~	2017-01-30 18:00:01.275961441 +0100
+++ libnftnl-1.0.7/src/object.c	2017-01-30 18:05:26.546937696 +0100
@@ -25,6 +25,9 @@
 #include <buffer.h>
 #include "obj.h"
 
+// __builtin__snprintf_chk isn't in the structs...
+#undef snprintf
+
 static struct obj_ops *obj_ops[] = {
 	[NFT_OBJECT_COUNTER]	= &obj_ops_counter,
 	[NFT_OBJECT_QUOTA]	= &obj_ops_quota,
@@ -38,13 +41,13 @@ static struct obj_ops *nftnl_obj_ops_loo
 	return obj_ops[type];
 }
 
-struct nftnl_obj *nftnl_obj_alloc(void)
+__visible struct nftnl_obj *nftnl_obj_alloc(void)
 {
 	return calloc(1, sizeof(struct nftnl_obj));
 }
 EXPORT_SYMBOL(nftnl_obj_alloc);
 
-void nftnl_obj_free(const struct nftnl_obj *obj)
+__visible void nftnl_obj_free(const struct nftnl_obj *obj)
 {
 	if (obj->flags & (1 << NFTNL_OBJ_TABLE))
 		xfree(obj->table);
@@ -55,7 +58,7 @@ void nftnl_obj_free(const struct nftnl_o
 }
 EXPORT_SYMBOL(nftnl_obj_free);
 
-bool nftnl_obj_is_set(const struct nftnl_obj *obj, uint16_t attr)
+__visible bool nftnl_obj_is_set(const struct nftnl_obj *obj, uint16_t attr)
 {
 	return obj->flags & (1 << attr);
 }
@@ -66,7 +69,7 @@ static uint32_t nftnl_obj_validate[NFTNL
 	[NFTNL_OBJ_USE]		= sizeof(uint32_t),
 };
 
-void nftnl_obj_set_data(struct nftnl_obj *obj, uint16_t attr,
+__visible void nftnl_obj_set_data(struct nftnl_obj *obj, uint16_t attr,
 			const void *data, uint32_t data_len)
 {
 	if (attr < NFTNL_OBJ_MAX)
@@ -99,31 +102,31 @@ void nftnl_obj_set_data(struct nftnl_obj
 }
 EXPORT_SYMBOL(nftnl_obj_set_data);
 
-void nftnl_obj_set(struct nftnl_obj *obj, uint16_t attr, const void *data)
+__visible void nftnl_obj_set(struct nftnl_obj *obj, uint16_t attr, const void *data)
 {
 	nftnl_obj_set_data(obj, attr, data, nftnl_obj_validate[attr]);
 }
 EXPORT_SYMBOL(nftnl_obj_set);
 
-void nftnl_obj_set_u32(struct nftnl_obj *obj, uint16_t attr, uint32_t val)
+__visible void nftnl_obj_set_u32(struct nftnl_obj *obj, uint16_t attr, uint32_t val)
 {
 	nftnl_obj_set_data(obj, attr, &val, sizeof(uint32_t));
 }
 EXPORT_SYMBOL(nftnl_obj_set_u32);
 
-void nftnl_obj_set_u64(struct nftnl_obj *obj, uint16_t attr, uint64_t val)
+__visible void nftnl_obj_set_u64(struct nftnl_obj *obj, uint16_t attr, uint64_t val)
 {
 	nftnl_obj_set_data(obj, attr, &val, sizeof(uint64_t));
 }
 EXPORT_SYMBOL(nftnl_obj_set_u64);
 
-void nftnl_obj_set_str(struct nftnl_obj *obj, uint16_t attr, const char *str)
+__visible void nftnl_obj_set_str(struct nftnl_obj *obj, uint16_t attr, const char *str)
 {
 	nftnl_obj_set_data(obj, attr, str, 0);
 }
 EXPORT_SYMBOL(nftnl_obj_set_str);
 
-const void *nftnl_obj_get_data(struct nftnl_obj *obj, uint16_t attr,
+__visible const void *nftnl_obj_get_data(struct nftnl_obj *obj, uint16_t attr,
 			       uint32_t *data_len)
 {
 	if (!(obj->flags & (1 << attr)))
@@ -155,34 +158,34 @@ const void *nftnl_obj_get_data(struct nf
 }
 EXPORT_SYMBOL(nftnl_obj_get_data);
 
-const void *nftnl_obj_get(struct nftnl_obj *obj, uint16_t attr)
+__visible const void *nftnl_obj_get(struct nftnl_obj *obj, uint16_t attr)
 {
 	uint32_t data_len;
 	return nftnl_obj_get_data(obj, attr, &data_len);
 }
 EXPORT_SYMBOL(nftnl_obj_get);
 
-uint32_t nftnl_obj_get_u32(struct nftnl_obj *obj, uint16_t attr)
+__visible uint32_t nftnl_obj_get_u32(struct nftnl_obj *obj, uint16_t attr)
 {
 	const void *ret = nftnl_obj_get(obj, attr);
 	return ret == NULL ? 0 : *((uint32_t *)ret);
 }
 EXPORT_SYMBOL(nftnl_obj_get_u32);
 
-uint64_t nftnl_obj_get_u64(struct nftnl_obj *obj, uint16_t attr)
+__visible uint64_t nftnl_obj_get_u64(struct nftnl_obj *obj, uint16_t attr)
 {
 	const void *ret = nftnl_obj_get(obj, attr);
 	return ret == NULL ? 0 : *((uint64_t *)ret);
 }
 EXPORT_SYMBOL(nftnl_obj_get_u64);
 
-const char *nftnl_obj_get_str(struct nftnl_obj *obj, uint16_t attr)
+__visible const char *nftnl_obj_get_str(struct nftnl_obj *obj, uint16_t attr)
 {
 	return nftnl_obj_get(obj, attr);
 }
 EXPORT_SYMBOL(nftnl_obj_get_str);
 
-void nftnl_obj_nlmsg_build_payload(struct nlmsghdr *nlh,
+__visible void nftnl_obj_nlmsg_build_payload(struct nlmsghdr *nlh,
 				   const struct nftnl_obj *obj)
 {
 	if (obj->flags & (1 << NFTNL_OBJ_TABLE))
@@ -229,7 +232,7 @@ static int nftnl_obj_parse_attr_cb(const
 	return MNL_CB_OK;
 }
 
-int nftnl_obj_nlmsg_parse(const struct nlmsghdr *nlh, struct nftnl_obj *obj)
+__visible int nftnl_obj_nlmsg_parse(const struct nlmsghdr *nlh, struct nftnl_obj *obj)
 {
 	struct nfgenmsg *nfg = mnl_nlmsg_get_payload(nlh);
 	struct nlattr *tb[NFTA_OBJ_MAX + 1] = {};
@@ -347,14 +350,14 @@ static int nftnl_obj_do_parse(struct nft
 	return ret;
 }
 
-int nftnl_obj_parse(struct nftnl_obj *obj, enum nftnl_parse_type type,
+__visible int nftnl_obj_parse(struct nftnl_obj *obj, enum nftnl_parse_type type,
 		      const char *data, struct nftnl_parse_err *err)
 {
 	return nftnl_obj_do_parse(obj, type, data, err, NFTNL_PARSE_BUFFER);
 }
 EXPORT_SYMBOL(nftnl_obj_parse);
 
-int nftnl_obj_parse_file(struct nftnl_obj *obj, enum nftnl_parse_type type,
+__visible int nftnl_obj_parse_file(struct nftnl_obj *obj, enum nftnl_parse_type type,
 			   FILE *fp, struct nftnl_parse_err *err)
 {
 	return nftnl_obj_do_parse(obj, type, fp, err, NFTNL_PARSE_FILE);
@@ -438,7 +441,7 @@ static int nftnl_obj_cmd_snprintf(char *
 	return offset;
 }
 
-int nftnl_obj_snprintf(char *buf, size_t size, const struct nftnl_obj *obj,
+__visible int nftnl_obj_snprintf(char *buf, size_t size, const struct nftnl_obj *obj,
 		       uint32_t type, uint32_t flags)
 {
 	return nftnl_obj_cmd_snprintf(buf, size, obj, nftnl_flag2cmd(flags),
@@ -452,7 +455,7 @@ static int nftnl_obj_do_snprintf(char *b
 	return nftnl_obj_snprintf(buf, size, obj, type, flags);
 }
 
-int nftnl_obj_fprintf(FILE *fp, const struct nftnl_obj *obj, uint32_t type,
+__visible int nftnl_obj_fprintf(FILE *fp, const struct nftnl_obj *obj, uint32_t type,
 		      uint32_t flags)
 {
 	return nftnl_fprintf(fp, obj, NFT_CMD_UNSPEC, type, flags,
@@ -464,7 +467,7 @@ struct nftnl_obj_list {
 	struct list_head list;
 };
 
-struct nftnl_obj_list *nftnl_obj_list_alloc(void)
+__visible struct nftnl_obj_list *nftnl_obj_list_alloc(void)
 {
 	struct nftnl_obj_list *list;
 
@@ -478,7 +481,7 @@ struct nftnl_obj_list *nftnl_obj_list_al
 }
 EXPORT_SYMBOL(nftnl_obj_list_alloc);
 
-void nftnl_obj_list_free(struct nftnl_obj_list *list)
+__visible void nftnl_obj_list_free(struct nftnl_obj_list *list)
 {
 	struct nftnl_obj *r, *tmp;
 
@@ -490,32 +493,32 @@ void nftnl_obj_list_free(struct nftnl_ob
 }
 EXPORT_SYMBOL(nftnl_obj_list_free);
 
-int nftnl_obj_list_is_empty(struct nftnl_obj_list *list)
+__visible int nftnl_obj_list_is_empty(struct nftnl_obj_list *list)
 {
 	return list_empty(&list->list);
 }
 EXPORT_SYMBOL(nftnl_obj_list_is_empty);
 
-void nftnl_obj_list_add(struct nftnl_obj *r, struct nftnl_obj_list *list)
+__visible void nftnl_obj_list_add(struct nftnl_obj *r, struct nftnl_obj_list *list)
 {
 	list_add(&r->head, &list->list);
 }
 EXPORT_SYMBOL(nftnl_obj_list_add);
 
-void nftnl_obj_list_add_tail(struct nftnl_obj *r,
+__visible void nftnl_obj_list_add_tail(struct nftnl_obj *r,
 			       struct nftnl_obj_list *list)
 {
 	list_add_tail(&r->head, &list->list);
 }
 EXPORT_SYMBOL(nftnl_obj_list_add_tail);
 
-void nftnl_obj_list_del(struct nftnl_obj *t)
+__visible void nftnl_obj_list_del(struct nftnl_obj *t)
 {
 	list_del(&t->head);
 }
 EXPORT_SYMBOL(nftnl_obj_list_del);
 
-int nftnl_obj_list_foreach(struct nftnl_obj_list *table_list,
+__visible int nftnl_obj_list_foreach(struct nftnl_obj_list *table_list,
 			     int (*cb)(struct nftnl_obj *t, void *data),
 			     void *data)
 {
@@ -536,7 +539,7 @@ struct nftnl_obj_list_iter {
 	struct nftnl_obj	*cur;
 };
 
-struct nftnl_obj_list_iter *
+__visible struct nftnl_obj_list_iter *
 nftnl_obj_list_iter_create(struct nftnl_obj_list *l)
 {
 	struct nftnl_obj_list_iter *iter;
@@ -555,7 +558,7 @@ nftnl_obj_list_iter_create(struct nftnl_
 }
 EXPORT_SYMBOL(nftnl_obj_list_iter_create);
 
-struct nftnl_obj *nftnl_obj_list_iter_next(struct nftnl_obj_list_iter *iter)
+__visible struct nftnl_obj *nftnl_obj_list_iter_next(struct nftnl_obj_list_iter *iter)
 {
 	struct nftnl_obj *r = iter->cur;
 
@@ -571,7 +574,7 @@ struct nftnl_obj *nftnl_obj_list_iter_ne
 }
 EXPORT_SYMBOL(nftnl_obj_list_iter_next);
 
-void nftnl_obj_list_iter_destroy(struct nftnl_obj_list_iter *iter)
+__visible void nftnl_obj_list_iter_destroy(struct nftnl_obj_list_iter *iter)
 {
 	xfree(iter);
 }
--- libnftnl-1.0.7/src/rule.c.omv~	2017-01-30 18:05:48.987130355 +0100
+++ libnftnl-1.0.7/src/rule.c	2017-01-30 18:11:06.963746701 +0100
@@ -29,6 +29,8 @@
 #include <libnftnl/set.h>
 #include <libnftnl/expr.h>
 
+#undef snprintf
+
 struct nftnl_rule {
 	struct list_head head;
 
@@ -50,7 +52,7 @@ struct nftnl_rule {
 	struct list_head expr_list;
 };
 
-struct nftnl_rule *nftnl_rule_alloc(void)
+__visible struct nftnl_rule *nftnl_rule_alloc(void)
 {
 	struct nftnl_rule *r;
 
@@ -64,7 +66,7 @@ struct nftnl_rule *nftnl_rule_alloc(void
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_alloc, nft_rule_alloc);
 
-void nftnl_rule_free(const struct nftnl_rule *r)
+__visible void nftnl_rule_free(const struct nftnl_rule *r)
 {
 	struct nftnl_expr *e, *tmp;
 
@@ -82,13 +84,13 @@ void nftnl_rule_free(const struct nftnl_
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_free, nft_rule_free);
 
-bool nftnl_rule_is_set(const struct nftnl_rule *r, uint16_t attr)
+__visible bool nftnl_rule_is_set(const struct nftnl_rule *r, uint16_t attr)
 {
 	return r->flags & (1 << attr);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_is_set, nft_rule_attr_is_set);
 
-void nftnl_rule_unset(struct nftnl_rule *r, uint16_t attr)
+__visible void nftnl_rule_unset(struct nftnl_rule *r, uint16_t attr)
 {
 	if (!(r->flags & (1 << attr)))
 		return;
@@ -123,7 +125,7 @@ static uint32_t nftnl_rule_validate[NFTN
 	[NFTNL_RULE_POSITION]	= sizeof(uint64_t),
 };
 
-int nftnl_rule_set_data(struct nftnl_rule *r, uint16_t attr,
+__visible int nftnl_rule_set_data(struct nftnl_rule *r, uint16_t attr,
 			const void *data, uint32_t data_len)
 {
 	nftnl_assert_attr_exists(attr, NFTNL_RULE_MAX);
@@ -178,31 +180,31 @@ int nftnl_rule_set_data(struct nftnl_rul
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_set_data, nft_rule_attr_set_data);
 
-int nftnl_rule_set(struct nftnl_rule *r, uint16_t attr, const void *data)
+__visible int nftnl_rule_set(struct nftnl_rule *r, uint16_t attr, const void *data)
 {
 	return nftnl_rule_set_data(r, attr, data, nftnl_rule_validate[attr]);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_set, nft_rule_attr_set);
 
-void nftnl_rule_set_u32(struct nftnl_rule *r, uint16_t attr, uint32_t val)
+__visible void nftnl_rule_set_u32(struct nftnl_rule *r, uint16_t attr, uint32_t val)
 {
 	nftnl_rule_set_data(r, attr, &val, sizeof(uint32_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_set_u32, nft_rule_attr_set_u32);
 
-void nftnl_rule_set_u64(struct nftnl_rule *r, uint16_t attr, uint64_t val)
+__visible void nftnl_rule_set_u64(struct nftnl_rule *r, uint16_t attr, uint64_t val)
 {
 	nftnl_rule_set_data(r, attr, &val, sizeof(uint64_t));
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_set_u64, nft_rule_attr_set_u64);
 
-int nftnl_rule_set_str(struct nftnl_rule *r, uint16_t attr, const char *str)
+__visible int nftnl_rule_set_str(struct nftnl_rule *r, uint16_t attr, const char *str)
 {
 	return nftnl_rule_set_data(r, attr, str, strlen(str) + 1);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_set_str, nft_rule_attr_set_str);
 
-const void *nftnl_rule_get_data(const struct nftnl_rule *r, uint16_t attr,
+__visible const void *nftnl_rule_get_data(const struct nftnl_rule *r, uint16_t attr,
 				   uint32_t *data_len)
 {
 	if (!(r->flags & (1 << attr)))
@@ -238,20 +240,20 @@ const void *nftnl_rule_get_data(const st
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get_data, nft_rule_attr_get_data);
 
-const void *nftnl_rule_get(const struct nftnl_rule *r, uint16_t attr)
+__visible const void *nftnl_rule_get(const struct nftnl_rule *r, uint16_t attr)
 {
 	uint32_t data_len;
 	return nftnl_rule_get_data(r, attr, &data_len);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get, nft_rule_attr_get);
 
-const char *nftnl_rule_get_str(const struct nftnl_rule *r, uint16_t attr)
+__visible const char *nftnl_rule_get_str(const struct nftnl_rule *r, uint16_t attr)
 {
 	return nftnl_rule_get(r, attr);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get_str, nft_rule_attr_get_str);
 
-uint32_t nftnl_rule_get_u32(const struct nftnl_rule *r, uint16_t attr)
+__visible uint32_t nftnl_rule_get_u32(const struct nftnl_rule *r, uint16_t attr)
 {
 	uint32_t data_len;
 	const uint32_t *val = nftnl_rule_get_data(r, attr, &data_len);
@@ -262,7 +264,7 @@ uint32_t nftnl_rule_get_u32(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get_u32, nft_rule_attr_get_u32);
 
-uint64_t nftnl_rule_get_u64(const struct nftnl_rule *r, uint16_t attr)
+__visible uint64_t nftnl_rule_get_u64(const struct nftnl_rule *r, uint16_t attr)
 {
 	uint32_t data_len;
 	const uint64_t *val = nftnl_rule_get_data(r, attr, &data_len);
@@ -273,7 +275,7 @@ uint64_t nftnl_rule_get_u64(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get_u64, nft_rule_attr_get_u64);
 
-uint8_t nftnl_rule_get_u8(const struct nftnl_rule *r, uint16_t attr)
+__visible uint8_t nftnl_rule_get_u8(const struct nftnl_rule *r, uint16_t attr)
 {
 	uint32_t data_len;
 	const uint8_t *val = nftnl_rule_get_data(r, attr, &data_len);
@@ -284,7 +286,7 @@ uint8_t nftnl_rule_get_u8(const struct n
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_get_u8, nft_rule_attr_get_u8);
 
-void nftnl_rule_nlmsg_build_payload(struct nlmsghdr *nlh, struct nftnl_rule *r)
+__visible void nftnl_rule_nlmsg_build_payload(struct nlmsghdr *nlh, struct nftnl_rule *r)
 {
 	struct nftnl_expr *expr;
 	struct nlattr *nest, *nest2;
@@ -325,7 +327,7 @@ void nftnl_rule_nlmsg_build_payload(stru
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_nlmsg_build_payload, nft_rule_nlmsg_build_payload);
 
-void nftnl_rule_add_expr(struct nftnl_rule *r, struct nftnl_expr *expr)
+__visible void nftnl_rule_add_expr(struct nftnl_rule *r, struct nftnl_expr *expr)
 {
 	list_add_tail(&expr->head, &r->expr_list);
 }
@@ -425,7 +427,7 @@ static int nftnl_rule_parse_compat(struc
 	return 0;
 }
 
-int nftnl_rule_nlmsg_parse(const struct nlmsghdr *nlh, struct nftnl_rule *r)
+__visible int nftnl_rule_nlmsg_parse(const struct nlmsghdr *nlh, struct nftnl_rule *r)
 {
 	struct nlattr *tb[NFTA_RULE_MAX+1] = {};
 	struct nfgenmsg *nfg = mnl_nlmsg_get_payload(nlh);
@@ -631,14 +633,14 @@ static int nftnl_rule_do_parse(struct nf
 
 	return ret;
 }
-int nftnl_rule_parse(struct nftnl_rule *r, enum nftnl_parse_type type,
+__visible int nftnl_rule_parse(struct nftnl_rule *r, enum nftnl_parse_type type,
 		   const char *data, struct nftnl_parse_err *err)
 {
 	return nftnl_rule_do_parse(r, type, data, err, NFTNL_PARSE_BUFFER);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_parse, nft_rule_parse);
 
-int nftnl_rule_parse_file(struct nftnl_rule *r, enum nftnl_parse_type type,
+__visible int nftnl_rule_parse_file(struct nftnl_rule *r, enum nftnl_parse_type type,
 			FILE *fp, struct nftnl_parse_err *err)
 {
 	return nftnl_rule_do_parse(r, type, fp, err, NFTNL_PARSE_FILE);
@@ -829,7 +831,7 @@ static int nftnl_rule_cmd_snprintf(char
 	return offset;
 }
 
-int nftnl_rule_snprintf(char *buf, size_t size, const struct nftnl_rule *r,
+__visible int nftnl_rule_snprintf(char *buf, size_t size, const struct nftnl_rule *r,
 			uint32_t type, uint32_t flags)
 {
 	return nftnl_rule_cmd_snprintf(buf, size, r, nftnl_flag2cmd(flags), type,
@@ -843,7 +845,7 @@ static int nftnl_rule_do_snprintf(char *
 	return nftnl_rule_snprintf(buf, size, r, type, flags);
 }
 
-int nftnl_rule_fprintf(FILE *fp, const struct nftnl_rule *r, uint32_t type,
+__visible int nftnl_rule_fprintf(FILE *fp, const struct nftnl_rule *r, uint32_t type,
 		       uint32_t flags)
 {
 	return nftnl_fprintf(fp, r, NFTNL_CMD_UNSPEC, type, flags,
@@ -851,7 +853,7 @@ int nftnl_rule_fprintf(FILE *fp, const s
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_fprintf, nft_rule_fprintf);
 
-int nftnl_expr_foreach(struct nftnl_rule *r,
+__visible int nftnl_expr_foreach(struct nftnl_rule *r,
                           int (*cb)(struct nftnl_expr *e, void *data),
                           void *data)
 {
@@ -883,7 +885,7 @@ static void nftnl_expr_iter_init(const s
 				       head);
 }
 
-struct nftnl_expr_iter *nftnl_expr_iter_create(const struct nftnl_rule *r)
+__visible struct nftnl_expr_iter *nftnl_expr_iter_create(const struct nftnl_rule *r)
 {
 	struct nftnl_expr_iter *iter;
 
@@ -897,7 +899,7 @@ struct nftnl_expr_iter *nftnl_expr_iter_
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_iter_create, nft_rule_expr_iter_create);
 
-struct nftnl_expr *nftnl_expr_iter_next(struct nftnl_expr_iter *iter)
+__visible struct nftnl_expr *nftnl_expr_iter_next(struct nftnl_expr_iter *iter)
 {
 	struct nftnl_expr *expr = iter->cur;
 
@@ -913,13 +915,13 @@ struct nftnl_expr *nftnl_expr_iter_next(
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_iter_next, nft_rule_expr_iter_next);
 
-void nftnl_expr_iter_destroy(struct nftnl_expr_iter *iter)
+__visible void nftnl_expr_iter_destroy(struct nftnl_expr_iter *iter)
 {
 	xfree(iter);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_expr_iter_destroy, nft_rule_expr_iter_destroy);
 
-bool nftnl_rule_cmp(const struct nftnl_rule *r1, const struct nftnl_rule *r2)
+__visible bool nftnl_rule_cmp(const struct nftnl_rule *r1, const struct nftnl_rule *r2)
 {
 	struct nftnl_expr_iter it1, it2;
 	struct nftnl_expr *e1, *e2;
@@ -954,7 +956,7 @@ struct nftnl_rule_list {
 	struct list_head list;
 };
 
-struct nftnl_rule_list *nftnl_rule_list_alloc(void)
+__visible struct nftnl_rule_list *nftnl_rule_list_alloc(void)
 {
 	struct nftnl_rule_list *list;
 
@@ -968,7 +970,7 @@ struct nftnl_rule_list *nftnl_rule_list_
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_alloc, nft_rule_list_alloc);
 
-void nftnl_rule_list_free(struct nftnl_rule_list *list)
+__visible void nftnl_rule_list_free(struct nftnl_rule_list *list)
 {
 	struct nftnl_rule *r, *tmp;
 
@@ -980,31 +982,31 @@ void nftnl_rule_list_free(struct nftnl_r
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_free, nft_rule_list_free);
 
-int nftnl_rule_list_is_empty(const struct nftnl_rule_list *list)
+__visible int nftnl_rule_list_is_empty(const struct nftnl_rule_list *list)
 {
 	return list_empty(&list->list);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_is_empty, nft_rule_list_is_empty);
 
-void nftnl_rule_list_add(struct nftnl_rule *r, struct nftnl_rule_list *list)
+__visible void nftnl_rule_list_add(struct nftnl_rule *r, struct nftnl_rule_list *list)
 {
 	list_add(&r->head, &list->list);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_add, nft_rule_list_add);
 
-void nftnl_rule_list_add_tail(struct nftnl_rule *r, struct nftnl_rule_list *list)
+__visible void nftnl_rule_list_add_tail(struct nftnl_rule *r, struct nftnl_rule_list *list)
 {
 	list_add_tail(&r->head, &list->list);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_add_tail, nft_rule_list_add_tail);
 
-void nftnl_rule_list_del(struct nftnl_rule *r)
+__visible void nftnl_rule_list_del(struct nftnl_rule *r)
 {
 	list_del(&r->head);
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_del, nft_rule_list_del);
 
-int nftnl_rule_list_foreach(struct nftnl_rule_list *rule_list,
+__visible int nftnl_rule_list_foreach(struct nftnl_rule_list *rule_list,
 			  int (*cb)(struct nftnl_rule *r, void *data),
 			  void *data)
 {
@@ -1025,7 +1027,7 @@ struct nftnl_rule_list_iter {
 	struct nftnl_rule		*cur;
 };
 
-struct nftnl_rule_list_iter *
+__visible struct nftnl_rule_list_iter *
 nftnl_rule_list_iter_create(const struct nftnl_rule_list *l)
 {
 	struct nftnl_rule_list_iter *iter;
@@ -1044,13 +1046,13 @@ nftnl_rule_list_iter_create(const struct
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_iter_create, nft_rule_list_iter_create);
 
-struct nftnl_rule *nftnl_rule_list_iter_cur(struct nftnl_rule_list_iter *iter)
+__visible struct nftnl_rule *nftnl_rule_list_iter_cur(struct nftnl_rule_list_iter *iter)
 {
 	return iter->cur;
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_iter_cur, nft_rule_list_iter_cur);
 
-struct nftnl_rule *nftnl_rule_list_iter_next(struct nftnl_rule_list_iter *iter)
+__visible struct nftnl_rule *nftnl_rule_list_iter_next(struct nftnl_rule_list_iter *iter)
 {
 	struct nftnl_rule *r = iter->cur;
 
@@ -1066,7 +1068,7 @@ struct nftnl_rule *nftnl_rule_list_iter_
 }
 EXPORT_SYMBOL_ALIAS(nftnl_rule_list_iter_next, nft_rule_list_iter_next);
 
-void nftnl_rule_list_iter_destroy(const struct nftnl_rule_list_iter *iter)
+__visible void nftnl_rule_list_iter_destroy(const struct nftnl_rule_list_iter *iter)
 {
 	xfree(iter);
 }
